--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1
-- Dumped by pg_dump version 15.1 (Debian 15.1-1.pgdg110+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: decrease_api_keys_count(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE OR REPLACE FUNCTION "public"."decrease_api_keys_count"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    SECURITY DEFINER
    AS $$BEGIN
UPDATE services
SET api_keys_count = api_keys_count - 1
WHERE id = OLD.service_id;
RETURN NULL;
END;$$;


ALTER FUNCTION "public"."decrease_api_keys_count"() OWNER TO "postgres";

--
-- Name: increase_api_keys_count(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE OR REPLACE FUNCTION "public"."increase_api_keys_count"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    SECURITY DEFINER
    AS $$BEGIN
UPDATE services
SET api_keys_count = api_keys_count + 1
WHERE id = NEW.service_id;
RETURN NULL;
END;$$;


ALTER FUNCTION "public"."increase_api_keys_count"() OWNER TO "postgres";

--
-- Name: update_invoice_status(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE OR REPLACE FUNCTION "public"."update_invoice_status"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    SECURITY DEFINER
    AS $$BEGIN
IF NEW.received_amount >= NEW.price THEN
  NEW.status = 'paid';
END IF;
RETURN NEW;
END;$$;


ALTER FUNCTION "public"."update_invoice_status"() OWNER TO "postgres";

--
-- Name: update_received_amount(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE OR REPLACE FUNCTION "public"."update_received_amount"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    SECURITY DEFINER
    AS $$BEGIN
UPDATE invoices
SET received_amount = received_amount + NEW.amount
WHERE pay_address = NEW."to";
RETURN NULL;
END;$$;


ALTER FUNCTION "public"."update_received_amount"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

--
-- Name: api_keys; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE "public"."api_keys" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "checksum" "text" NOT NULL,
    "scopes" "text"[] NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "service_id" "uuid" NOT NULL
);


ALTER TABLE "public"."api_keys" OWNER TO "postgres";

--
-- Name: api_keys_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE "public"."api_keys" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."api_keys_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: hook_deliveries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE "public"."hook_deliveries" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "status_code" smallint NOT NULL,
    "started_at" timestamp with time zone NOT NULL,
    "completed_at" timestamp with time zone NOT NULL,
    "redelivery" boolean DEFAULT false NOT NULL,
    "request_body" "jsonb" NOT NULL,
    "success" boolean NOT NULL,
    "url" "text" NOT NULL,
    "request_headers" "jsonb" NOT NULL,
    "response_headers" "jsonb" NOT NULL,
    "type" "text" NOT NULL,
    "hook_id" "uuid" NOT NULL,
    "response_body" "text"
);


ALTER TABLE "public"."hook_deliveries" OWNER TO "postgres";

--
-- Name: hook_deliveries_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE "public"."hook_deliveries" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."hook_deliveries_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: hooks; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE "public"."hooks" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "url" "text" NOT NULL,
    "event_types" "text"[] NOT NULL,
    "service_id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "description" "text"
);


ALTER TABLE "public"."hooks" OWNER TO "postgres";

--
-- Name: invoices; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE "public"."invoices" (
    "index" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "expires_at" timestamp with time zone NOT NULL,
    "price" double precision NOT NULL,
    "currency" "text",
    "recipient_address" "text" NOT NULL,
    "pay_address" "text",
    "status" "text" DEFAULT 'pending'::"text",
    "received_amount" double precision DEFAULT '0'::double precision,
    "refunded_amount" double precision DEFAULT '0'::double precision,
    "service_id" "uuid",
    "title" "text" NOT NULL,
    "description" "text",
    "metadata" "jsonb",
    "id" "text" NOT NULL,
    "user_id" "uuid",
    "redirect_url" "text"
);


ALTER TABLE "public"."invoices" OWNER TO "postgres";

--
-- Name: invoices_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE "public"."invoices" ALTER COLUMN "index" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."invoices_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: payments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE "public"."payments" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "from" "text" NOT NULL,
    "to" "text" NOT NULL,
    "hash" "text" NOT NULL,
    "amount" double precision NOT NULL,
    "timestamp" bigint NOT NULL,
    "invoice_id" "text" NOT NULL
);


ALTER TABLE "public"."payments" OWNER TO "postgres";

--
-- Name: services; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE "public"."services" (
    "user_id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "avatar_url" "text",
    "description" "text",
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "display_name" "text" DEFAULT ''::text NOT NULL,
    "contact_email" "text",
    "website" "text",
    "api_keys_count" bigint DEFAULT '0'::bigint NOT NULL
);


ALTER TABLE "public"."services" OWNER TO "postgres";


--
-- Name: transactions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE "public"."payments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."transactions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: api_keys api_keys_checksum_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."api_keys"
    ADD CONSTRAINT "api_keys_checksum_key" UNIQUE ("checksum");


--
-- Name: api_keys api_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."api_keys"
    ADD CONSTRAINT "api_keys_pkey" PRIMARY KEY ("id");


--
-- Name: hook_deliveries hook_deliveries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."hook_deliveries"
    ADD CONSTRAINT "hook_deliveries_pkey" PRIMARY KEY ("id");


--
-- Name: hooks hooks_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."hooks"
    ADD CONSTRAINT "hooks_pkey" PRIMARY KEY ("id");


--
-- Name: invoices invoices_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_id_key" UNIQUE ("index");


--
-- Name: invoices invoices_id_key1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_id_key1" UNIQUE ("id");


--
-- Name: invoices invoices_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_pkey" PRIMARY KEY ("id");


--
-- Name: invoices invoices_receiver_address_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_receiver_address_key" UNIQUE ("pay_address");


--
-- Name: services projects_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."services"
    ADD CONSTRAINT "projects_name_key" UNIQUE ("name");


--
-- Name: services projects_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."services"
    ADD CONSTRAINT "projects_pkey" PRIMARY KEY ("id");



--
-- Name: payments transactions_hash_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "transactions_hash_key" UNIQUE ("hash");


--
-- Name: payments transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "transactions_pkey" PRIMARY KEY ("id");


--
-- Name: api_keys update_on_delete_api_key; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER "update_on_delete_api_key" AFTER DELETE ON "public"."api_keys" FOR EACH ROW EXECUTE FUNCTION "public"."decrease_api_keys_count"();


--
-- Name: api_keys update_on_insert_api_key; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER "update_on_insert_api_key" AFTER INSERT ON "public"."api_keys" FOR EACH ROW EXECUTE FUNCTION "public"."increase_api_keys_count"();


--
-- Name: payments update_on_receive; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER "update_on_receive" AFTER INSERT ON "public"."payments" FOR EACH ROW EXECUTE FUNCTION "public"."update_received_amount"();


--
-- Name: invoices update_on_received_amount; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER "update_on_received_amount" BEFORE INSERT OR UPDATE ON "public"."invoices" FOR EACH ROW EXECUTE FUNCTION "public"."update_invoice_status"();


--
-- Name: api_keys api_keys_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."api_keys"
    ADD CONSTRAINT "api_keys_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "public"."services"("id") ON DELETE CASCADE;


--
-- Name: hook_deliveries hook_deliveries_hook_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."hook_deliveries"
    ADD CONSTRAINT "hook_deliveries_hook_id_fkey" FOREIGN KEY ("hook_id") REFERENCES "public"."hooks"("id") ON DELETE CASCADE;


--
-- Name: hooks hooks_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."hooks"
    ADD CONSTRAINT "hooks_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "public"."services"("id") ON DELETE CASCADE;


--
-- Name: invoices invoices_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "public"."services"("id");


--
-- Name: invoices invoices_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."invoices"
    ADD CONSTRAINT "invoices_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;


--
-- Name: payments payments_invoice_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_invoice_id_fkey" FOREIGN KEY ("invoice_id") REFERENCES "public"."invoices"("id") ON DELETE CASCADE;


--
-- Name: payments payments_to_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."payments"
    ADD CONSTRAINT "payments_to_fkey" FOREIGN KEY ("to") REFERENCES "public"."invoices"("pay_address");


--
-- Name: services services_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY "public"."services"
    ADD CONSTRAINT "services_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

--
-- Name: api_keys; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE "public"."api_keys" ENABLE ROW LEVEL SECURITY;

--
-- Name: api_keys api_keys_read_policy; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "api_keys_read_policy" ON "public"."api_keys" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."services"
  WHERE (("services"."user_id" = "auth"."uid"()) AND ("services"."id" = "api_keys"."service_id")))));


--
-- Name: hook_deliveries; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE "public"."hook_deliveries" ENABLE ROW LEVEL SECURITY;

--
-- Name: hooks; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE "public"."hooks" ENABLE ROW LEVEL SECURITY;

--
-- Name: hooks hooks_read_policy; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "hooks_read_policy" ON "public"."hooks" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."services"
  WHERE (("services"."user_id" = "auth"."uid"()) AND ("services"."id" = "hooks"."service_id")))));


--
-- Name: invoices; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE "public"."invoices" ENABLE ROW LEVEL SECURITY;

--
-- Name: invoices invoices_read_policy; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "invoices_read_policy" ON "public"."invoices" FOR SELECT TO "authenticated" USING ((("auth"."uid"() = "user_id") OR (EXISTS ( SELECT 1
   FROM "public"."services"
  WHERE (("services"."user_id" = "auth"."uid"()) AND ("services"."id" = "invoices"."service_id"))))));


--
-- Name: payments; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE "public"."payments" ENABLE ROW LEVEL SECURITY;

--
-- Name: services; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE "public"."services" ENABLE ROW LEVEL SECURITY;


--
-- Name: SCHEMA "public"; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


--
-- Name: FUNCTION "decrease_api_keys_count"(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION "public"."decrease_api_keys_count"() TO "anon";
GRANT ALL ON FUNCTION "public"."decrease_api_keys_count"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."decrease_api_keys_count"() TO "service_role";


--
-- Name: FUNCTION "increase_api_keys_count"(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION "public"."increase_api_keys_count"() TO "anon";
GRANT ALL ON FUNCTION "public"."increase_api_keys_count"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."increase_api_keys_count"() TO "service_role";


--
-- Name: FUNCTION "update_invoice_status"(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION "public"."update_invoice_status"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_invoice_status"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_invoice_status"() TO "service_role";


--
-- Name: FUNCTION "update_received_amount"(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION "public"."update_received_amount"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_received_amount"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_received_amount"() TO "service_role";


--
-- Name: TABLE "api_keys"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE "public"."api_keys" TO "anon";
GRANT ALL ON TABLE "public"."api_keys" TO "authenticated";
GRANT ALL ON TABLE "public"."api_keys" TO "service_role";


--
-- Name: SEQUENCE "api_keys_id_seq"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE "public"."api_keys_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."api_keys_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."api_keys_id_seq" TO "service_role";


--
-- Name: TABLE "hook_deliveries"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE "public"."hook_deliveries" TO "anon";
GRANT ALL ON TABLE "public"."hook_deliveries" TO "authenticated";
GRANT ALL ON TABLE "public"."hook_deliveries" TO "service_role";


--
-- Name: SEQUENCE "hook_deliveries_id_seq"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE "public"."hook_deliveries_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."hook_deliveries_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."hook_deliveries_id_seq" TO "service_role";


--
-- Name: TABLE "hooks"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE "public"."hooks" TO "anon";
GRANT ALL ON TABLE "public"."hooks" TO "authenticated";
GRANT ALL ON TABLE "public"."hooks" TO "service_role";


--
-- Name: TABLE "invoices"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE "public"."invoices" TO "anon";
GRANT ALL ON TABLE "public"."invoices" TO "authenticated";
GRANT ALL ON TABLE "public"."invoices" TO "service_role";


--
-- Name: SEQUENCE "invoices_id_seq"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE "public"."invoices_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."invoices_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."invoices_id_seq" TO "service_role";


--
-- Name: TABLE "payments"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE "public"."payments" TO "anon";
GRANT ALL ON TABLE "public"."payments" TO "authenticated";
GRANT ALL ON TABLE "public"."payments" TO "service_role";


--
-- Name: TABLE "services"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE "public"."services" TO "anon";
GRANT ALL ON TABLE "public"."services" TO "authenticated";
GRANT ALL ON TABLE "public"."services" TO "service_role";


--
-- Name: SEQUENCE "transactions_id_seq"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE "public"."transactions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."transactions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."transactions_id_seq" TO "service_role";


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";


--
-- PostgreSQL database dump complete
--

RESET ALL;
